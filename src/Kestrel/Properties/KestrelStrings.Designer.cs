// <auto-generated />
namespace Microsoft.AspNetCore.Server.Kestrel
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class KestrelStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Server.Kestrel.KestrelStrings", typeof(KestrelStrings).GetTypeInfo().Assembly);

        /// <summary>
        /// The endpoint {endpointName} is missing the required 'Url' parameter.
        /// </summary>
        internal static string EndpointMissingUrl
        {
            get => GetString("EndpointMissingUrl");
        }

        /// <summary>
        /// The endpoint {endpointName} is missing the required 'Url' parameter.
        /// </summary>
        internal static string FormatEndpointMissingUrl(object endpointName)
            => string.Format(CultureInfo.CurrentCulture, GetString("EndpointMissingUrl", "endpointName"), endpointName);

        /// <summary>
        /// Unable to configure HTTPS endpoint. Try running 'dotnet developercertificates https -t' to setup a developer certificate for use with localhost. For information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054
        /// </summary>
        internal static string HttpsUrlProvidedButNoDevelopmentCertificateFound
        {
            get => GetString("HttpsUrlProvidedButNoDevelopmentCertificateFound");
        }

        /// <summary>
        /// Unable to configure HTTPS endpoint. Try running 'dotnet developercertificates https -t' to setup a developer certificate for use with localhost. For information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054
        /// </summary>
        internal static string FormatHttpsUrlProvidedButNoDevelopmentCertificateFound()
            => GetString("HttpsUrlProvidedButNoDevelopmentCertificateFound");

        /// <summary>
        /// The endpoint {endpointName} specified multiple certificate sources.
        /// </summary>
        internal static string MultipleCertificateSources
        {
            get => GetString("MultipleCertificateSources");
        }

        /// <summary>
        /// The endpoint {endpointName} specified multiple certificate sources.
        /// </summary>
        internal static string FormatMultipleCertificateSources(object endpointName)
            => string.Format(CultureInfo.CurrentCulture, GetString("MultipleCertificateSources", "endpointName"), endpointName);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
